-- @path Carto=/fr.inria.portolan.core/model/PortolanCore.ecore
-- @path KML=/fr.inria.modeling.kml/model/KML-2.2.ecore

-- ******************************************************************************
-- * Copyright (c) 2009, 2011 INRIA Rennes Bretagne-Atlantique and others.
-- *
-- * All rights reserved.   This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- *   INRIA Rennes Bretagne-Atlantique - Initial API and implementation
-- ******************************************************************************

module Cartography2KML;
create OUT : KML from IN : Cartography;

helper def: document : KML!Document = OclUndefined;
helper def: folder   : KML!Folder   = OclUndefined;

entrypoint rule init() {
	to
		doc	: KML!Document (
			name		<- 'Root Document',
			features	<- Sequence{
							items
						}
		),
		items	: KML!Folder (
			name		<- 'Items'--,
--			features	<- Sequence{Cartography!Entity.allInstances()
--							->select(e|e->isGeoLocalized())}
--			features	<- Cartography!Entity.allInstances()
--							->select(e|e->isGeoLocalized())
--							->collect(ge | thisModule.resolveTemp(ge, 'p'))
		)
	do {
		thisModule.document <- doc;
		thisModule.folder   <- items;
	}
}

rule GeoEntity2Placemark {
	from
		ge : Cartography!Entity (
			ge->isGeoLocalized()
		)
	using {
		coords : Sequence(String) =
			ge.getCoordinates();
	}
	to
		p : KML!Placemark (
--			name		<- ge.identifier.value,
			name		<- ge.__id,	-- richer because used as description
			geometry	<- point
		),
		point : KML!Point (
			coordinates	<- coordinate
		),
		coordinate : KML!Coordinate (
			lon			<- coords->at(1)->toReal(),
			lat			<- coords->at(2)->toReal(),
			alt			<- coords->at(3)->toReal()
		)
	do {
		thisModule.folder.features <- thisModule.folder.features->union(Sequence{p});
	}
}

helper context Cartography!Entity def: getCoordinates() : Sequence(String) =
	if not self.locator.oclIsUndefined() 
	then if not self.locator.value.oclIsUndefined()
		then
			self.locator.value->split(',')
		else Sequence{}
		endif
	else Sequence{}
	endif
	;

helper context Cartography!Entity def: isGeoLocalized() : Boolean =
	self.getCoordinates()->size() = 3;